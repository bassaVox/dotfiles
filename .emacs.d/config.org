#+TITLE: Emacs configuration
#+AUTHOR: bassavox

#+OPTION: num:nil
#+PROPERTY: header-args :results silent

* Prelude
  There are a couple of resources that can help you using org-mode to configure
  emacs:

  - [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g/playlists][renzix]]
  - [[https://github.com/alhassy/emacs.d][A Life Configuring Emacs]]
  - [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g/playlists][Youtube "Uncle Bob" playlist]]
  - [[https://www.youtube.com/watch?v=74zOY-vgkyw&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ&index=1][System Crafter's 'Emacs from Scratch']]

* Setup
  Setting repositories and usepackage
** setup repositories

   Melpa and Elpa enabling

   #+BEGIN_SRC emacs-lisp
     (setq package-enable-at-startup nil
           package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                              ("melpa" . "https://melpa.org/packages/")
                              ("melpa-stable" . "https://stable.melpa.org/packages/")
                              ("org" . "https://orgmode.org/elpa/")))

     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))
   #+END_SRC   

** bootstratp usepackage

   #+name: use-package
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (require 'use-package)
     (require 'use-package-ensure)
     (setq use-package-always-ensure t) ;; so you don't need to invoke ':ensure t' for every package
   #+END_SRC 

** preferences
*** Display & Appearance
**** Stripping things out
    Removing upper bar and scroll and giving some customized breathing room on all frames:

    #+NAME: bar-disable
    #+BEGIN_SRC emacs-lisp
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (tool-bar-mode -1)
      (set-fringe-mode 5)
    #+END_SRC
**** Theme and modeline
    Doom-Moonlight, Doom-Gruvbox, Doom-vibrant and Doom-Tomorrownight are amongst
    my favourites themes!
    #+NAME: theme
    #+BEGIN_SRC emacs-lisp
      (use-package doom-themes
        :config (load-theme 'doom-vibrant t)
        (doom-themes-org-config)
        )
    #+END_SRC 
    
    Doom has a nice, minimalistic, modeline. You may have to run "all-the-icons-install-fonts".
    #+NAME: modeline
    #+BEGIN_SRC emacs-lisp
      ;; all-the-icons is required for doom-modeline
      (use-package all-the-icons)
      (use-package doom-modeline
        :ensure t
        :init (doom-modeline-mode 1)
        :config
        (set-face-attribute 'mode-line nil :family "Noto Sans" :height 80)
        (set-face-attribute 'mode-line-inactive nil :family "Noto Sans" :height 80)
        :custom ((doom-modeline-height 1)))
      (column-number-mode)


    #+END_SRC
**** Cursor and Movement
    By default, emacs' jumps the cursor, along with the content, 
    to the middle of the screen when scrolling pass the end of the file.
    To prevent those jumps use:

    #+BEGIN_SRC emacs-lisp
      (setq scroll-conservatively 101 )
    #+END_SRC

    Highlighting current line and making it more pronounceable when
    changing windows or buffers.

    #+BEGIN_SRC emacs-lisp
      (when window-system (global-hl-line-mode t))
      (use-package beacon
        :ensure t
        :init
        (beacon-mode 1))

    #+END_SRC
*** Fonts
    My go-to fonts are "Source Code Pro", [[https://www.jetbrains.com/lp/mono/]["JetBrains Mono"]], "Fira Code Retina" and "Ubuntu Mono"
    and I my change between them from time to time. I haven't set ligatures yet, but I really don't
    mind much about that for now.
    #+NAME:fonts
    #+BEGIN_SRC emacs-lisp
      (set-face-attribute 'default nil :font "Fira Code Retina" :height 107)
    #+END_SRC
    
*** Miscelania

    Just use y and n for prompt action. 
    Preventing the "error sound", for example, when reaching the end of the
    file.

    #+NAME: minor-miscelania
    #+BEGIN_SRC emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
      (setq ring-bell-function 'ignore)
    #+END_SRC
    
    
    Changing default behavior of saving backups on the same directory
    to a dedicated folder
    #+NAME: backups
    #+BEGIN_SRC emacs-lisp
      (setq backup-directory-alist `(("." . "~/.backup_emacs"))
            backup-by-copying t
            delete-old-versions t
            kept-new-versions 10
            kept-old-versions 10
            version-control t
            auto-save-list-file-prefix nil
            auto-save-default nil)
    #+END_SRC

    Disabling the Welcome screen
    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen t)
    
    #+END_SRC

* Terminal
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
* General Use Packages
** which-key
   Shows keybindings as you type

   #+NAME: which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :init (which-key-mode)
       :diminish which-key-mode
       :config
       (setq which-key-idle-delay 0.8))
   #+END_SRC
** magit
   Modeline information about branches is not always [[https://magit.vc/manual/magit/The-mode_002dline-information-isn_0027t-always-up_002dto_002ddate.html][up-to-date]],
   you can force upate from 'vc' package with (setq auto-revert-check-vc-info t)
   with some performance penalty
   #+NAME: magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit)
   #+END_SRC
   
** helm

   Other file completions are ido-mode and ivy 

   #+NAME: helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :init
       (setq helm-follow-mode-persistent t
	     helm-autoresize-max-height 40
	     helm-display-header-line nil)
       :config
       (require 'helm-config)
       (helm-autoresize-mode t)
       (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)
       (helm-mode t))
     #+END_SRC
*** helm-rg
#+NAME: helm-rg
#+BEGIN_SRC emacs-lisp
(use-package helm-rg)

#+END_SRC
** projectile
   Projectile manages projects.

   #+NAME: projectile
   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :config
       (projectile-mode t)
       (helm-projectile-on))

   #+END_SRC
** company
   
   Autocomplete for words in programming languages. It needs lsp-mode
   
   #+NAME: company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :config
       (add-hook 'after-init-hook 'global-company-mode)
       (setq company-require-match 'never
	     company-minimum-prefix-length 2
	     company-tooltip-align-annotation 1
	     company-idle-delay 1
	     company-tooltip-limit 20
	     global-company-mode t))
   #+END_SRC

** lsp-mode
   Needed by company. Provides IDE-like experience. TODO: integrate with python
   See [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][python support.]] See [[https://github.com/mattduck/dotfiles/blob/master/emacs.d.symlink/init.org#lsp-base-packages][other's configs]]
   #+NAME: lsp-mode
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :commands lsp
       :hook
       ((scala-mode . lsp)
        (python-mode . lsp)
        (js-mode . lsp)
        (rust-mode . lsp)
        (web-mode . lsp)
        (sh-mode . lsp)
        (vue-mode . lsp))
       :config 
       (setq lsp-prefer-flymake nil
             lsp-enable-snippet t
             lsp-auto-execute-action t
             lsp-eldoc-render-all t
             lsp-enable-completion-at-point t
             lsp-enable-xref t
             lsp-enable-indentation t)
       :bind-keymap
       ("C-?" . lsp-command-map)

       )


     ;; lisp-ui adds inline UI element
     (use-package lsp-ui
       :after lsp-mode
       :hook (lsp-mode-hook . lsp-ui-mode))

     (use-package company-lsp
       :after '(company lsp-mode)
       :config
       (setq company-lsp-cache-candidates t
             company-lsp-async t
             company-lsp-enable-snippet t)
       (push 'company-lsp company-backends))

     (use-package company-box
       :hook (company-mode . company-box-mode))
     (use-package dap-mode
       :config
       (dap-mode 1)
       (dap-ui-mode 1)
       (require 'dap-python))


   #+END_SRC
** flycheck
#+NAME: flyckeck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC
** editorconfig
#+NAME: editorconfig
#+BEGIN_SRC emacs-lisp
   (use-package editorconfig
     :ensure t
     :config
     (editorconfig-mode 1)
     (add-hook 'editorconfig-after-apply-functions
     (lambda (props) (setq web-mode-script-padding 0)))

   )
#+END_SRC
** yasnippet
Copy and paste from [[https://www.reddit.com/r/emacs/comments/9bvawd/use_yasnippet_via_usepackage/][reddit]] user
#+NAME: yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
   (yas-reload-all)
   (add-hook 'vue-mode #'yas-minor-mode)
   (add-hook 'web-mode #'yas-minor-mode)
   )

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
** avy
   Allows you to navegate by character seen on any visible portion of
   any opened window

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    ;; home row keys
    (setq avy-keys '(?c ?i ?e ?a ?n ?t ?s ?p))
)

#+END_SRC
** expand region
   That feature of selecting text by expanding semantically significant portions may have
   come from IntelliJ
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t)
   #+END_SRC
** multiple cursors

   That is one of the things you will see usefullness only if you practice...

   #+BEGIN_SRC emacs-lisp
     ;;installing it's dependency
     (use-package cl-lib
       :ensure t)
     (use-package multiple-cursors
       :ensure t)

   #+END_SRC
** dumb-jump
   I've build from source ripgrep (written in rust) beforehand, which this package
   can use to jump to definition

   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump
       :ensure t)
   #+END_SRC

** rainbow everywhere
#+NAME: rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** being helpful
#+NAME: helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC
* Org Mode Related
  Generally I go to [[http://doc.norang.ca/org-mode.html][a good workflow explanation]] to get ideas on using org mode.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-agenda-files
          '("~/git/org/"))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
          (sequence "BACKLOG(b)" "READY(r)" "ACTIVE(a)" "|" "COMPLETED(c)" "CANC(k)" )))
    (setq org-attach-id-dir '("~/Dropbox/org-attachments"))
  (setq org-agenda-custom-commands
        '(
          ("n" todo "NEXT")
          ("h" "Agenda and Home-related tasks"
           ((agenda)
            (tags-todo "@home")
            (tags "@home"
                  ((org-agenda-sorting-strategy '(priority-up)))))
           ((org-agenda-sorting-strategy '(priority-down))))
          ("o" "Agenda and Office-related tasks"
           ((agenda)
            (tags-todo "@office")
            (tags "@office")))))

    (setq org-tag-alist
          '((:startgroup . nil)
            ;; mutually exclusive tags of location
            ("@home" . ?h)
            ("@office" . ?o)
            ("@errand" . ?e)
            (:endgroup . nil)
            (:startgroup . nil)
            ;; mutually exclusive tags of action
            ("Cleaning" . ?c)
            ("Thinking" . ?t)
            ("Shopping" . ?s)
            ("Practicing" . ?p)
            (:endgroup . nil)
            ("idea" . ?i)
            ("funny" . ?y)
            ("habit" . ?b)
            ("personal" . ?l)))

    (setq org-refile-targets
          '(("arquivar.org" :maxlevel . 9)))
    ;; saving after refiling
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/git/org/anotar.org" "Inbox")
         "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/git/org/lembrar.org")
         "* %?\nEntered on %U\n  %i\n  %a")))

    ;; tracking habits
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)
    :custom
    (org-agenda-start-with-log-mode t) ;; present a log intraday when logging
    (org-log-done 'time)
    (org-log-into-drawer t))
#+END_SRC
** org-babel
#+BEGIN_SRC emacs-lisp
(use-package ein)


#+END_SRC
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (python . t)
     (ein . t)
     (ipython . t)
     (shell . t)
     (latex . t)
     (scheme . t)
     (R . t)
     (lilypond . t)
     ))
#+END_SRC
** ox-hugo
   Let's try out hugo for static site generation. This package exports org
   subtrees using markdown to the appropriate content folder of a Hugo site.
   Hugo allegedly supports org markdown, but this package is very usefull
   if you plan to use a single file and export posts, for example, by
   subtrees.
#+NAME: ox-hugo
#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :ensure t
    :after ox)
#+END_SRC
** plantuml
   Well, this is not just for Org Mode but I usually make diagrams in it.
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :init
    (setq plantuml-default-exec-mode 'jar)
    (setq plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
    (setq org-plantuml-jar-path (expand-file-name "/usr/share/plantuml/plantuml.jar"))
    (setq org-startup-with-inline-images t)
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (org-babel-do-load-languages 'org-babel-load-languages '((plantuml .t )))
    :interpreter ("plantuml" . plantuml-mode)
    )
#+END_SRC
** htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize)

#+END_SRC
* Knowledge Management
- A [[https://www.youtube.com/watch?v=EjQRqd_3AnA][good example]].
- [[https://www.orgroam.com/manual.html#Introduction][Org-roam documentation]]
** pdf-tools
There are some [[https://github.com/politza/pdf-tools][dependencies]] to pdf-tools. After installing it you can, for example,
render a pdf in 'midnight mode' which, by itself, justifies you installing it.
(M-x pdf-tools-help RET) will help.

TODO: For some reason, when visiting a PDF file via org-noter, running M-x pdf-tools-install
was required for pdf-tools to load. 
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools)

#+END_SRC
** org-noter
Org noter will open another frame with two windows for you to make annotations, 
this is called a 'annotation session', that can be killed when on document buffer 
by pressing 'q'. Just press 'i' to make an annotation.

Just (M-x org-noter) on a org file with the correct property and you can create
or review your notes on a pdf.

#+NAME: org-noter 
#+BEGIN_SRC emacs-lisp
(use-package org-noter)

#+END_SRC
** org roam
   Following the Zettelkasten method, [[https://www.orgroam.com/manual.html][org roam]] helps bulding a network of permanent
   notes with hyperlinks.
   For the "fleeting notes", notes capture when doing some other activity that are usually
   processed within a day, one can use both org-capture or Org Roam's "Dailies".

   
   To install it, execute first: 
   (use-package org-roam :ensure t)

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t) ; to inhibit message about new version 2
    :custom
    (org-roam-directory "~/git/org-roam")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))
#+END_SRC   
* Languages Specific Modes and Support
** all
#+NAME: all-languages
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil) 
#+END_SRC
** rust
   See https://www.reddit.com/r/rust/comments/a3da5g/my_entire_emacs_config_for_rust_in_fewer_than_20/

#+NAME: rust-mode
#+BEGIN_SRC emacs-lisp
     (use-package toml-mode)
     
     (use-package rust-mode
       :hook (rust-mode . lsp))

     ;; Add keybindings for interacting with Cargo
     (use-package cargo
       :hook (rust-mode . cargo-minor-mode))

     (use-package flycheck-rust
       :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC
** python
Elpy configuration extracted from this [[https://medium.com/analytics-vidhya/managing-a-python-development-environment-in-emacs-43897fd48c6a][medium article]], this is a nice
article and his python configuration is very comprehensive
#+NAME: python-mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package elpy
  ;;   :ensure t
  ;;   :bind
  ;;   (:map elpy-mode-map
  ;; 	("C-M-n" . elpy-nav-forward-block)
  ;; 	("C-M-p" . elpy-nav-backward-block))
  ;;   :hook ((elpy-mode . flycheck-mode)
  ;; 	 (pyenv-mode . elpy-rpc-restart))
  ;;   :init
  ;;   (elpy-enable)
  ;;   :config
  ;;   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)))

  ;; (use-package elpy
  ;;   :ensure t
  ;;   :init
  ;;   (elpy-enable))
#+END_SRC

#+NAME: blacken-mode
#+BEGIN_SRC emacs-lisp
  (use-package blacken
    :ensure t
    :hook (python-mode . blacken-mode)
    :hook (ein-python . blacken-mode)
    :config
    (setq blacken-line-lenth '88))
#+END_SRC

#+NAME: python-interpreter
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "/usr/bin/python3.9")

#+END_SRC
** sml
  #+NAME: sml-mode
  #+BEGIN_SRC emacs-lisp
  (use-package sml-mode)
  #+END_SRC
** web
   #+NAME: web-mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
     :config
     (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))


     (setq
     web-mode-markup-indent-offset 2
     web-mode-code-indent-offset 2
     web-mode-enable-auto-closing t
     web-mode-enable-auto-opening t
     web-mode-enable-auto-pairing t
     web-mode-enable-auto-indentation t
     web-mode-script-padding 0
     web-mode-block-padding 0
     web-mode-style-padding 0
     )

     )

     (use-package prettier-js
     :config
     ;; (add-hook 'web-mode-hook 'prettier-js-mode))
     )
     (setq prettier-js-args '(
     "--trailing-comma" "all"
     "--bracket-spacing" "true"
     "--single-quote" "true"
     ))
   #+END_SRC
** vue
   #+NAME: vue-mode
   #+BEGIN_SRC emacs-lisp
     ;; (use-package vue-mode
     ;;   :mode ("\\.vue\\'" . vue-mode)
     ;;   :config
     ;;   (add-hook 'vue-mode-hook #'lsp)
     ;;   )
   #+END_SRC
** racket
#+BEGIN_SRC emacs-lisp
    (use-package racket-mode
      :ensure t
      :init
      (add-to-list 'org-src-lang-modes '("racket" . racket ))
      ;; this won't work....you need og-racket manually installed for integration:
      ;;(org-babel-do-load-languages 'org-babel-load-languages '((racket .t )))
      :interpreter ("racket" . racket-mode)
      )

#+END_SRC

** r
#+BEGIN_SRC emacs-lisp
(use-package ess)

#+END_SRC
** MIT-scheme
   So you want to read [[https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html][SICP]]...
   Go install scheme with "sudo apt install mit-scheme" on Ubuntu.
#+NAME: giser
#+BEGIN_SRC emacs-lisp
  (use-package geiser)
  (setq geiser-active-implementations '(mit))
#+END_SRC
** clojure
#+BEGIN_SRC emacs-lisp
    (use-package clojure-mode
      :ensure t
      )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    )

#+END_SRC

* Expendable
#+BEGIN_SRC emacs-lisp
  (use-package speed-type)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package command-log-mode)

#+END_SRC
* Custom Functions
Loading this configuration file (binding are defined later):
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC

Reloading this configuration file
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
* General Keybindings
Trying to keep keybindings in one place

#+NAME: keybidings
#+BEGIN_SRC emacs-lisp

  (use-package general
    :config
    (general-define-key
     "M-x" 'helm-M-x
     "C-x g" 'magit-status
     "M-p" 'projectile-command-map
     "C-c p" 'projectile-command-map
     "C-x C-f" 'helm-find-files
     "C-x C-b" 'helm-buffers-list
     "C-:" 'avy-goto-char
     "M-g g" 'avy-goto-line
     "M-g M-g" 'avy-goto-line
     "C-c a" 'org-agenda
     "C-c c" 'org-capture
     "C-c e" 'config-visit
     "C-c l" 'org-store-link
     "C-c r" 'config-reload
     "C-." 'er/expand-region
     ;; "C-," 'mc/mark-next-like-this
     "C-=" 'mc/mark-next-like-this
     "C-a" 'back-to-indentation
     "M-<backspace>" 'delete-indentation ; C-<backspace> kills back word
     ;; changing keybidings due to my new layout "DonTyQ"
     ;; https://configure.zsa.io/ergodox-ez/layouts/RlEeW/latest/0
     "C-b" 'transpose-chars
     "C-f" 'isearch-forward
     "C-s" 'forward-char
     "C-t" 'backward-char
     )
    (general-define-key
     :keymaps 'isearch-mode-map
     "C-t" 'isearch-repeat-backward)
    (general-create-definer bassavox/leader-key :prefix "C-!")
    (bassavox/leader-key
      "t" '(:ignore t :which-key "Text")))

  (use-package hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "text zoom"
    ("n" text-scale-increase "in")
    ("t" text-scale-decrease "out")
    ("r" (text-scale-set 0) "reset" :exit t)
    ("f" nil "finished" :exit t))
  (bassavox/leader-key
    "ts" '(hydra-text-scale/body :which-key "scale-text"))
#+END_SRC
* Dead keys in emacs
  On my ergodox I have dead keys "~" and "^" but also, the respective non dead keys
  counterparts, so I can use keybinds like M-^ (org-delete-identation) and type
  those characters without needing to type a space after them. But for Emacs the
  non dead keys "^" and "~" won't work unless I use this line,
  [[https://www.emacswiki.org/emacs/DeadKeys][as suggested by the wiki]]:
#+BEGIN_SRC  emacs-lisp
(require 'iso-transl)

#+END_SRC
* Looking forward to
  Here goes the list of packages I want to try out someday:
** Forge
   [[https://emacsair.me/2018/12/19/forge-0.1/][link]]
   Integrating gitlab or github API
   
** org-wild-notifier
   Getting  notification integration for org-agenda views.
   [[https://github.com/akhramov/org-wild-notifier.el][github]]
** declarative org capture templates
   Easier syntax for Org Capture
   [[https://github.com/progfolio/doct][github]]
** better search keybindings
   [[https://www.emacswiki.org/emacs/IncrementalSearch][See emacs wiki]]
** better resizing windows, like text resizing
** 
