#+TITLE: Emacs configuration
#+AUTHOR: damenipotu

#+OPTION: num:nil
#+PROPERTY: header-args :results silent

* Prelude
  There are a couple of resources that can help you using org-mode to configure
  emacs:

  - [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g/playlists][renzix]]
  - [[https://github.com/alhassy/emacs.d][A Life Configuring Emacs]]
  - [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g/playlists][Youtube "Uncle Bob" playlist]]

* Setup
  Install usepackage and bootstrap it
** setup repositories

   Melpa and Elpa enabling

   #+BEGIN_SRC emacs-lisp
     (setq package-enable-at-startup nil
	   package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
			      ("melpa" . "https://melpa.org/packages/")))
   #+END_SRC   

** bootstratp usepackage

   #+name: use-package
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     (require 'use-package)
     (require 'use-package-ensure)
     (setq use-package-always-ensure t)
   #+END_SRC 

** preferences
*** Display
    Removing upper bar and scroll

    #+NAME: bar-disable
    #+BEGIN_SRC emacs-lisp
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (tool-bar-mode -1)
    #+END_SRC

    Nice dark Theme

    #+NAME: theme
    #+BEGIN_SRC emacs-lisp
      (use-package doom-themes
        :config (load-theme 'doom-gruvbox t)
        (doom-themes-org-config)
        )
    #+END_SRC 
    
    By default, emacs' jumps the cursor, along with the content, 
    to the middle of the screen when scrolling pass the end of the file.
    To prevent those jumps:

    #+BEGIN_SRC emacs-lisp
      (setq scroll-conservatively 101 )
    #+END_SRC

    Highlighting current line and making it more pronounceable when
    changing windows or buffers.

    #+BEGIN_SRC emacs-lisp
      (when window-system (global-hl-line-mode t))
      (use-package beacon
        :ensure t
        :init
        (beacon-mode 1))

    #+END_SRC
    
*** Miscelania

    Just use y and n for prompt action. 
    Preventing the "error sound", for example, when reaching the end of the
    file.

    #+NAME: minor-miscelania
    #+BEGIN_SRC emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
      (setq ring-bell-function 'ignore)
    #+END_SRC
    
    
    Changing default behavior of saving backups on the same directory
    to a dedicated folder
    #+NAME: backups
    #+BEGIN_SRC emacs-lisp
      (setq backup-directory-alist `(("." . "~/.backup_emacs"))
            backup-by-copying t
            delete-old-versions t
            kept-new-versions 10
            kept-old-versions 10
            version-control t
            auto-save-list-file-prefix nil
            auto-save-default nil)
    #+END_SRC

    Disabling the Welcome screen
    #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen t)
    
    #+END_SRC

* Terminal
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
* General Use Packages
** which-key
   shows keybindings as you type

   #+NAME: which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config (which-key-mode))
   #+END_SRC
** magit
   #+NAME: magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit)
   #+END_SRC
   
** helm

   Other file completions are ido-mode and ivy 

   #+NAME: helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :init
       (setq helm-follow-mode-persistent t
	     helm-autoresize-max-height 40
	     helm-display-header-line nil)
       :config
       (require 'helm-config)
       (helm-autoresize-mode t)
       (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)
       (helm-mode t))
     #+END_SRC
** projectile
   Projectile manages projects. Installing the official one plus extension

   #+NAME: projectile
   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :config
       (projectile-mode t)
       (helm-projectile-on))
   #+END_SRC
** company
   
   Autocomplete for words in programming languages. It needs lsp-mode
   
   #+NAME: company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :config
       (add-hook 'after-init-hook 'global-company-mode)
       (setq company-require-match 'never
	     company-minimum-prefix-length 2
	     company-tooltip-align-annotation 1
	     company-idle-delay 1
	     company-tooltip-limit 20
	     global-company-mode t))
   #+END_SRC

** lsp-mode
   Needed by company. Provides IDE-like experience. TODO: integrate with python

   #+NAME: lsp-mode
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :commands lsp
       :hook
       ((scala-mode . lsp)
	(python-mode . lsp)
	(js-mode . lsp)
	(rust-mode . lsp)
	(web-mode . lsp)
	(sh-mode . lsp)
        (vue-mode . lsp))
       :config 
       (setq lsp-prefer-flymake nil
	     lsp-enable-snippet t
	     lsp-auto-execute-action t
	     lsp-eldoc-render-all t
	     lsp-enable-completion-at-point t
	     lsp-enable-xref t
	     lsp-enable-indentation t))

     ;; lisp-ui adds inline UI element

     (use-package lsp-ui
       :after lsp-mode
       :hook (lsp-mode-hook . lsp-ui-mode))

     (use-package company-lsp
       :after '(company lsp-mode)
       :config
       (setq company-lsp-cache-candidates t
	     company-lsp-async t
	     company-lsp-enable-snippet t)
       (push 'company-lsp company-backends))

     (use-package company-box
       :hook (company-mode . company-box-mode))
     (use-package dap-mode
       :config
       (dap-mode 1)
       (dap-ui-mode 1)
       (require 'dap-python))


   #+END_SRC
** flycheck
#+NAME: flyckeck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC
** editorconfig
#+NAME: editorconfig
#+BEGIN_SRC emacs-lisp
  ;; (use-package editorconfig
  ;;   :ensure t
  ;;   :config
  ;;   (editorconfig-mode 1)
  ;;   (add-hook 'editorconfig-after-apply-functions
  ;;   (lambda (props) (setq web-mode-block-padding 0)))

  ;; )
#+END_SRC
** yasnippet
Copy and paste from [[https://www.reddit.com/r/emacs/comments/9bvawd/use_yasnippet_via_usepackage/][reddit]] user
#+NAME: yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
   (yas-reload-all)
   (add-hook 'vue-mode #'yas-minor-mode)
   (add-hook 'web-mode #'yas-minor-mode)
   )

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
** avy
   Allows you to navegate by character seen on any visible portion of
   any opened window

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t)

#+END_SRC
** expand region
   That feature of selecting text by expanding semantically significant portions may have
   come from IntelliJ
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t)
   #+END_SRC
** multiple cursors

   That is one of the things you will see usefullness only if you practice...

   #+BEGIN_SRC emacs-lisp
     ;;installing it's dependency
     (use-package cl-lib
       :ensure t)
     (use-package multiple-cursors
       :ensure t)

   #+END_SRC
** dumb-jump
   I've build from source ripgrep (written in rust) beforehand, which this package
   can use to jump to definition

   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump
       :ensure t)
   #+END_SRC

* Org Mode Related
** ox-hugo
   Let's try out hugo for static site generation. This package exports org
   subtrees using markdown to the appropriate content folder of a Hugo site.
   Hugo allegedly supports org markdown, but this package is very usefull
   if you plan to use a single file and export posts, for example, by
   subtrees.
#+NAME: ox-hugo
#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :ensure t
    :after ox)
#+END_SRC
** plantuml
   Well, this is not just for Org Mode but I usually make diagrams in it.
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :init
    (setq plantuml-default-exec-mode 'jar)
    (setq plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
    (setq org-plantuml-jar-path (expand-file-name "/usr/share/plantuml/plantuml.jar"))
    (setq org-startup-with-inline-images t)
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (org-babel-do-load-languages 'org-babel-load-languages '((plantuml .t )))
    :interpreter ("plantuml" . plantuml-mode)
    )
#+END_SRC
* Languages Specific Modes and Support
** all
#+NAME: all-languages
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil) 
#+END_SRC
** rust
   See https://www.reddit.com/r/rust/comments/a3da5g/my_entire_emacs_config_for_rust_in_fewer_than_20/

#+NAME: rust-mode
#+BEGIN_SRC emacs-lisp
     (use-package toml-mode)
     
     (use-package rust-mode
       :hook (rust-mode . lsp))

     ;; Add keybindings for interacting with Cargo
     (use-package cargo
       :hook (rust-mode . cargo-minor-mode))

     (use-package flycheck-rust
       :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC
** python
Elpy configuration extracted from this [[https://medium.com/analytics-vidhya/managing-a-python-development-environment-in-emacs-43897fd48c6a][medium article]], this is a nice
article and his python configuration is very comprehensive
#+NAME: python-mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package elpy
  ;;   :ensure t
  ;;   :bind
  ;;   (:map elpy-mode-map
  ;; 	("C-M-n" . elpy-nav-forward-block)
  ;; 	("C-M-p" . elpy-nav-backward-block))
  ;;   :hook ((elpy-mode . flycheck-mode)
  ;; 	 (pyenv-mode . elpy-rpc-restart))
  ;;   :init
  ;;   (elpy-enable)
  ;;   :config
  ;;   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)))

  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC

#+NAME: blacken-mode
#+BEGIN_SRC emacs-lisp
  (use-package blacken
    :ensure t
    :hook (python-mode . blacken-mode)
    :config
    (setq blacken-line-lenth '88))
#+END_SRC
** sml
  #+NAME: sml-mode
  #+BEGIN_SRC emacs-lisp
  (use-package sml-mode)
  #+END_SRC
** web
   #+NAME: web-mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
     :config
     (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
     (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))


     (setq
     web-mode-markup-indent-offset 2
     web-mode-css-indent-offset 2
     web-mode-code-indent-offset 2
     web-mode-enable-auto-closing t
     web-mode-enable-auto-opening t
     web-mode-enable-auto-pairing t
     web-mode-enable-auto-indentation t
     web-mode-script-padding 0
     web-mode-block-padding 0
     web-mode-style-padding 0
     web-mode-code-indent-offset 2
     )

     )

     (use-package prettier-js
     :config
     (add-hook 'web-mode-hook 'prettier-js-mode))

     (setq prettier-js-args '(
     "--trailing-comma" "all"
     "--bracket-spacing" "true"
     "--single-quote" "true"
     ))
   #+END_SRC
** vue
   #+NAME: vue-mode
   #+BEGIN_SRC emacs-lisp
     ;; (use-package vue-mode
     ;;   :mode ("\\.vue\\'" . vue-mode)
     ;;   :config
     ;;   (add-hook 'vue-mode-hook #'lsp)
     ;;   )
   #+END_SRC
** racket
#+BEGIN_SRC emacs-lisp
    (use-package racket-mode
      :ensure t
      :init
      (add-to-list 'org-src-lang-modes '("racket" . racket ))
      ;; this won't work....you need og-racket manually installed for integration:
      ;;(org-babel-do-load-languages 'org-babel-load-languages '((racket .t )))
      :interpreter ("racket" . racket-mode)
      )

#+END_SRC
* Expendable
#+BEGIN_SRC emacs-lisp
  (use-package speed-type)
#+END_SRC
* Custom Functions
Loading this configuration file (binding are defined later):
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC

Reloading this configuration file
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
* General Keybindings Go Here
  Keeping general bidings in one place
#+NAME: keybidings
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-define-key
     "M-x" 'helm-M-x
     "C-x g" 'magit-status
     "M-p" 'projectile-command-map
     "C-x C-f" 'helm-find-files
     "C-x C-b" 'helm-buffers-list
     "C-:" 'avy-goto-char
     "M-g g" 'avy-goto-line
     "M-g M-g" 'avy-goto-line
     "C-c e" 'config-visit
     "C-c r" 'config-reload
     "C-." 'er/expand-region
     ;; "C-," 'mc/mark-next-like-this
     "C-=" 'mc/mark-next-like-this
     "C-a" 'back-to-indentation
     "M-<backspace>" 'delete-indentation ; C-<backspace> kills back word
     ))


#+END_SRC
* Dead keys in emacs
  On my ergodox I have dead keys "~" and "^" but also, the respective non dead keys
  counterparts, so I can use keybinds like M-^ (org-delete-identation) and type
  those characters without needing to type a space after them. But for Emacs the
  non dead keys "^" and "~" won't work unless I use this line,
  [[https://www.emacswiki.org/emacs/DeadKeys][as suggested by the wiki]]:
#+BEGIN_SRC  emacs-lisp
(require 'iso-transl)

#+END_SRC
